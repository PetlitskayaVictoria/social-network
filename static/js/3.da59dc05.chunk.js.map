{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogItem","path","id","MenuItem","className","classes","dialogItem","src","img","avatar","alt","userName","name","Message","message","userId","leftaling","rightaling","messageAv","maxLength50","maxLengthCreator","AddNewMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","style","padding","Field","component","TextArea","placeholder","validate","required","width","maxWidth","maxHeight","marginBottom","textAlign","Button","type","variant","color","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","Paper","paddingBottom","height","Grid","container","spacing","item","xs","overflow","MenuList","dialogsContainer","Typography","dialogName","value","addMessage","addNewMessage","compose","dialogsPage","dispatch","addMessageActionCreator"],"mappings":"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","file":"static/js/3.da59dc05.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        isAuth : state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsContainer\":\"Dialogs_dialogsContainer__3xYxC\",\"dialogName\":\"Dialogs_dialogName__16_Nc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItem\":\"DialogItem_dialogItem__2RuWv\",\"avatar\":\"DialogItem_avatar__12OzI\",\"userName\":\"DialogItem_userName__2bG4n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\",\"leftaling\":\"Message_leftaling__2uzk7\",\"rightaling\":\"Message_rightaling__2_fi9\",\"messageAv\":\"Message_messageAv__b86z7\",\"userName\":\"Message_userName__3djD8\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport classes from './DialogItem.module.css'\nimport {DialogsType} from \"../../../redux/dialogs-reducer\";\nimport {MenuItem} from \"@material-ui/core\";\n\nconst DialogItem: React.FC<DialogsType> =(props) => {\n\n    let path = `/dialogs/${props.id}`;\n    return (\n        <MenuItem className={classes.dialogItem}>\n            <img src={props.img} className={classes.avatar} alt=\"avatar\"/>\n            <NavLink to={path} className={classes.userName}>{props.name}</NavLink>\n        </MenuItem>\n    );\n}\n\nexport default DialogItem;\n","import React from 'react';\nimport classes from \"./Message.module.css\"\nimport {MessagesType} from \"../../../redux/dialogs-reducer\";\n\nconst Message: React.FC<MessagesType> = (props) => {\n    return (\n\n        <div className={classes.message + ' ' + ((props.userId === 1) ? classes.leftaling : classes.rightaling)}>\n            <img src={props.avatar} className={classes.messageAv} alt=\"avatar\"/>\n            <div className={classes.userName}> {props.message} </div>\n        </div>\n    )\n}\n\nexport default Message;\n","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsType, MessagesType} from \"../../redux/dialogs-reducer\";\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\nimport {Field, reduxForm} from 'redux-form';\nimport {TextArea} from \"../common/FormsControl/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\nimport {Button, Grid, MenuList, Paper, Typography} from \"@material-ui/core\";\n\ntype LocalDialogsType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessagesType>\n    textMessage: string | undefined\n    isAuth: boolean\n    changeInputValue: (value: string) => void\n    addMessage: (value: any) => void\n}\n\nconst Dialogs = (props: LocalDialogsType) => {\n\n    let addMessage = (value: any) => {\n        props.addMessage(value.addNewMessage)\n    }\n\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id}\n                                                             name={d.name}\n                                                             id={d.id}\n                                                             img={d.img}/>)\n    let messagesElements = props.messages\n        .map(m => <Message key={m.id}\n                           message={m.message}\n                           id={m.id}\n                           userId={m.userId}\n                           avatar={m.avatar}\n\n        />)\n\n    // if (!props.isAuth) return <Redirect to={'/login'}/>\n\n    return (\n        <Paper style={{width : \"100%\", paddingBottom : \"20px\", height : \"650px\"}}>\n            <Grid container style={{padding : \"15px\", height : \"100%\"}} spacing={2}>\n                <Grid item xs={4}>\n                    <Paper style={{height : \"100%\", padding : \"15px\", overflow : \"auto\", marginBottom : \"20px\"}}>\n                        <MenuList>\n                            {dialogsElements}\n                        </MenuList>\n                    </Paper>\n                </Grid>\n                <Grid item xs={8}>\n                    <Paper className={classes.dialogsContainer}>\n                        <div>\n                            <Typography variant={\"h4\"} className={classes.dialogName}>Igor</Typography>\n                            <div>\n                                {messagesElements}\n                            </div>\n                        </div>\n                        <Paper>\n                            <AddNewMessageReduxForm onSubmit={addMessage}/>\n                        </Paper>\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\ntype FormDataType = {}\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddNewMessageForm = (props: InjectedFormProps<FormDataType>) => {\n    return (\n        <form onSubmit={props.handleSubmit} style={{padding : \"15px\"}}>\n            <div>\n                <Field name={\"addNewMessage\"}\n                       component={TextArea}\n                       placeholder=\"Type your message here...\"\n                       validate={[required, maxLength50]}\n                       style={{\n                           width : \"calc(100% - 20px)\",\n                           maxWidth : \"calc(100% - 20px)\",\n                           padding : \"10px\",\n                           maxHeight : \"70px\",\n                           marginBottom : \"10px\"\n                       }}\n                />\n            </div>\n            <div style={{textAlign : \"right\"}}>\n                <Button type={\"submit\"} variant={\"outlined\"} color={\"primary\"}>Send your message</Button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddNewMessageReduxForm = reduxForm<FormDataType>({\n    form : \"addNewMessage\"\n})(AddNewMessageForm)\n\nexport default Dialogs;\n","import React from 'react';\nimport {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppRootStateType, DispatchType} from \"../../redux/redux-store\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nconst mapStateToProps = (state: AppRootStateType) => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n    }\n}\n\nconst mapDispatchToProps = (dispatch: DispatchType) => {\n    return {\n        addMessage: (value: string) => {\n            dispatch(addMessageActionCreator(value))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}