{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Posts/Post/Post.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","Post","Paper","style","marginTop","padding","backgroundColor","className","classes","avatar","alt","src","userPhoto","message","likesCount","maxLength1000","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","TextArea","validate","required","placeholder","minWidth","minHeight","marginBottom","Button","type","variant","color","margin","Posts","newPosts","posts","map","p","id","Typography","postsHeader","value","addPost","postText","postsContainer","PostsContainer","ProfileDataReduxForm","error","profile","useSelector","profilePage","FormControl","styles","formContainer","createField","Input","Checkbox","Object","keys","contacts","key","formSummaryError","ProfileStatus","editMode","status","activateEditMode","setState","deactivateEditMode","updateStatus","onChangeHandler","e","currentTarget","prevProps","prevState","this","textAlign","fontStyle","autoFocus","onChange","onBlur","onDoubleClick","React","ProfileData","isOwner","goToEditMode","fullName","List","listContainer","aboutMe","lookingForAJob","lookingForAJobDescription","contactsContainer","contactType","contactValue","onClick","Contact","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","profilePhoto","photos","large","Grid","container","item","xs","marginRight","profilePicture","uploadFile","target","files","length","initialValues","formData","then","Profile","width","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/4.3d87c72d.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        isAuth : state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Post_avatar__3qkL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsHeader\":\"Posts_postsHeader__2Rl39\",\"postsContainer\":\"Posts_postsContainer__3fBmN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePicture\":\"Profile_profilePicture__2kcbj\",\"listContainer\":\"Profile_listContainer__160IQ\",\"contactsContainer\":\"Profile_contactsContainer__195_F\",\"uploadFile\":\"Profile_uploadFile__Jzl5m\"};","import React from 'react';\nimport classes from './Post.module.css'\nimport {PostsType} from \"../../../../redux/profile-reducer\";\nimport {Paper} from \"@material-ui/core\";\nimport userPhoto from \"./../../../../assets/images/user-avatar.png\"\n\nconst Post: React.FC<PostsType> = (props) => {\n    return (\n        <Paper style={{marginTop : \"20px\", padding : \"15px\", backgroundColor : \"#ccc9ff\"}}>\n            <img className={classes.avatar}\n                 alt={\"avatar\"}\n                 src={userPhoto}/>\n            <p>{props.message}</p>\n            <span>{`❤️ ${props.likesCount}`}</span>\n        </Paper>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post/Post';\nimport classes from './Posts.module.css'\nimport {PostsType} from \"../../../redux/profile-reducer\";\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/FormsControl/FormsControls\";\nimport {Button, Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport type PostsPageType = {\n    posts: Array<PostsType>\n    addPost: (inputValue: string) => void\n}\n\ntype FormDataType = {}\n\nconst maxLength1000 = maxLengthCreator(1000)\n\nconst AddPostForm = (props: InjectedFormProps<FormDataType>) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name=\"postText\"\n                    component={TextArea}\n                    validate={[required, maxLength1000]}\n                    placeholder={\"Type your thoughts here...\"}\n                    style={{minWidth : \"400px\", minHeight : \"100px\", marginBottom : \"5px\", padding : \"10px\"}}\n                />\n            </div>\n            <Button type={'submit'}\n                    variant={\"outlined\"}\n                    color={\"primary\"}\n                    style={{margin : \"10px 0\"}}>Add your post</Button>\n        </form>\n    )\n}\n\nexport const AddPostReduxForm = reduxForm<FormDataType>({\n    form : \"ProfileAddNewPostForm\"\n})(AddPostForm)\n\nconst Posts: React.FC<PostsPageType> = (props) => {\n    const addPost = (value: any) => {\n        props.addPost(value.postText)\n    }\n    const newPosts = props.posts.map(p => {\n        return <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>\n    })\n    return (\n        <Paper style={{marginTop : \"30px\", padding : \"15px\", backgroundColor : \"#ccc9ff\"}}>\n            <Typography variant=\"h3\" className={classes.postsHeader}>My Posts</Typography>\n            <AddPostReduxForm onSubmit={addPost}/>\n            <div className={classes.postsContainer}>\n                {newPosts}\n            </div>\n        </Paper>\n    );\n}\n\nexport default Posts;\n","import React from 'react';\nimport Posts from \"./Posts\";\nimport {PostsType} from \"../../../redux/profile-reducer\";\n\nexport type PostsContainerType = {\n    posts: PostsType[]\n    addPost: (inputValue: string) => void\n}\n\nconst PostsContainer: React.FC<PostsContainerType> = (props) => {\n    const state = props.posts\n\n    return (\n            <Posts addPost={props.addPost} posts={state}/>\n    );\n}\n\nexport default PostsContainer;\n","import {ProfileType} from \"../../../redux/profile-reducer\";\nimport React from \"react\";\nimport {reduxForm} from 'redux-form';\nimport {createField, Input, TextArea} from \"../../common/FormsControl/FormsControls\";\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\nimport styles from \"../../common/FormsControl/FormsControls.module.css\";\nimport {Button, Checkbox, FormControl} from \"@material-ui/core\";\n\nexport type ProfileFormDataType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType>> = ({handleSubmit, error}) => {\n    const profile = useSelector<AppRootStateType, ProfileType>(state => state.profilePage.profile)\n    return (\n        <form style={{marginTop : \"10px\"}} onSubmit={handleSubmit}>\n            <FormControl className={styles.formContainer}>\n                <div><b>Name:</b>{createField(\"Full name\", \"fullName\", [], Input)}</div>\n                <div><b>About me:</b> {createField(\"About me\", \"aboutMe\", [], TextArea)}</div>\n                <div><b>Looking for a job:</b> <Checkbox name={\"lookingForAJob\"}/></div>\n                <div><b>My professional\n                    skills:</b>{createField(\"My professional skills\", \"lookingForAJobDescription\", [], TextArea)}</div>\n                <div>\n                    <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                    return <div key={key}>\n                        <b> {createField(key, \"contacts.\" + key, [], Input)}</b>\n                    </div>\n                })}\n                </div>\n                {error && <div className={styles.formSummaryError}>\n                    {error}\n                </div>}\n                <div>\n                    <Button type={\"submit\"} variant=\"outlined\" color=\"primary\"\n                            style={{marginTop : \"10px\"}}>Save</Button>\n                </div>\n            </FormControl>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileFormDataType>({form : 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataReduxForm\n","import React, {ChangeEvent} from 'react';\nimport {Input} from \"@material-ui/core\";\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode : false,\n        status : this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState({\n            editMode : true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode : false\n        })\n        this.props.updateStatus(this.state.status)\n    }\n\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status : e.currentTarget.value\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: any) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status : this.props.status\n            })\n        }\n    }\n\n    render() {\n        return <div style={{textAlign : \"right\", fontStyle : \"italic\"}}>\n            <span><b>Status: </b></span>\n            {!this.state.editMode ?\n                <span onDoubleClick={this.activateEditMode}>{this.props.status || \"No status\"}</span> :\n                <Input autoFocus\n                       onChange={this.onChangeHandler}\n                       onBlur={this.deactivateEditMode}\n                       value={this.state.status}/>\n            }\n        </div>\n    }\n}\n\nexport default ProfileStatus;\n","import React, {ChangeEvent, useState} from 'react';\nimport classes from \"../Profile.module.css\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport userPhoto from \"./../../../assets/images/user-avatar.png\"\nimport ProfileDataReduxForm, {ProfileFormDataType} from \"./ProfileDataForm\";\nimport {Button, Grid, List, Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, saveProfile, status, updateStatus}) => {\n\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    let profilePhoto = profile.photos.large ? profile.photos.large : userPhoto\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileFormDataType) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={4} style={{marginRight: \"70px\"}}>\n                <img className={classes.profilePicture}\n                     src={profilePhoto} alt=\"avatar\"/>\n                <div>\n                    {isOwner && <label className={classes.uploadFile}>\n                        <input type={\"file\"} onChange={onMainPhotoSelected} className={classes.uploadFile}/>\n                        Change Photo\n                    </label>}\n                </div>\n            </Grid>\n            <Grid item xs={7}>\n                <Paper style={{padding : \"20px\", backgroundColor : \"#ccc9ff\"}}>\n                    <ProfileStatus status={status} updateStatus={updateStatus} />\n                    {editMode ? <ProfileDataReduxForm initialValues={{\n                            fullName : profile.fullName,\n                            aboutMe : profile.aboutMe,\n                            lookingForAJob : profile.lookingForAJob,\n                            lookingForAJobDescription : profile.lookingForAJobDescription\n                        }} onSubmit={onSubmit}/>\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\n                </Paper>\n            </Grid>\n        </Grid>\n\n    );\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <>\n            <Typography variant=\"h4\">{profile.fullName}</Typography>\n            <List className={classes.listContainer}>\n                <div><b>About me:</b> {profile.aboutMe}</div>\n                <div><b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n                {profile.lookingForAJob &&\n                <div><b>My professional skills:</b> {profile.lookingForAJobDescription}</div>}\n                <div>\n                    <b>Contacts: </b>\n                    <div className={classes.contactsContainer}>\n                        {Object.keys(profile.contacts).map(key => {\n                            //@ts-ignore\n                            return <Contact key={key} contactType={key} contactValue={profile.contacts[key]}/>\n                        })}\n                    </div>\n                </div>\n            </List>\n            {isOwner && <div>\n                <Button variant=\"outlined\" color=\"primary\" onClick={goToEditMode}>Edit</Button>\n            </div>}\n        </>\n    )\n}\n\ntype ContactPropsType = {\n    contactType: string\n    contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = ({contactType, contactValue}) => {\n    return (\n        <div>\n            <span><b>{contactType}: </b></span>\n            <span>{contactValue}</span>\n        </div>\n    )\n}\nexport default ProfileInfo;\n","import React from 'react';\nimport PostsContainer from \"./Posts/PostsContainer\";\nimport {PostsType, ProfileType} from '../../redux/profile-reducer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\nimport {Paper} from \"@material-ui/core\";\n\ntype ProfilePageType = {\n    posts: PostsType[]\n    status: string\n    profile: ProfileType\n    addPost: (inputValue: string) => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n}\n\nconst Profile: React.FC<ProfilePageType> = ({profile, status, updateStatus, posts, addPost, isOwner, savePhoto, saveProfile}) => {\n    return (\n        <Paper style={{width: \"100%\", padding: \"15px\", backgroundColor: \"#ccc9ff\"}}>\n            <ProfileInfo profile={profile}\n                         isOwner={isOwner}\n                         savePhoto={savePhoto}\n                         saveProfile={saveProfile}\n                         status={status}\n                         updateStatus={updateStatus}\n            />\n                <PostsContainer posts={posts} addPost={addPost}/>\n        </Paper>\n\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {\n    addPost,\n    getStatus,\n    getUserProfile,\n    PostsType,\n    ProfileType,\n    savePhoto,\n    saveProfile,\n    updateStatus,\n} from \"../../redux/profile-reducer\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {compose} from \"redux\";\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    posts: PostsType[]\n    profile: ProfileType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (inputValue: string) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n}\n\ntype OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            if (this.props.authorizedUserId)\n                userId = this.props.authorizedUserId + \"\"\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     posts={this.props.posts}\n                     addPost={this.props.addPost}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     isOwner={!this.props.match.params.userId}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        profile : state.profilePage.profile,\n        posts : state.profilePage.posts,\n        status : state.profilePage.status,\n        authorizedUserId : state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {addPost, getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}