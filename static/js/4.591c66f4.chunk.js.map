{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/Posts/Post/Post.module.css","components/Profile/Posts/Posts.module.css","components/Profile/Profile.module.css","components/Profile/Posts/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","Post","Paper","style","marginTop","padding","backgroundColor","className","classes","avatar","alt","src","userPhoto","message","likesCount","maxLength1000","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","TextArea","validate","required","placeholder","minWidth","minHeight","marginBottom","Button","type","variant","color","margin","Posts","newPosts","posts","map","p","id","Typography","postsHeader","value","addPost","postText","postsContainer","PostsContainer","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","ProfileDataReduxForm","error","profile","useSelector","profilePage","FormControl","styles","formContainer","createField","Input","Checkbox","keys","contacts","key","formSummaryError","ProfileStatus","editMode","status","activateEditMode","setState","deactivateEditMode","updateStatus","onChangeHandler","e","currentTarget","prevProps","prevState","this","textAlign","fontStyle","autoFocus","onChange","onBlur","onDoubleClick","React","ProfileData","isOwner","goToEditMode","fullName","List","listContainer","aboutMe","lookingForAJob","lookingForAJobDescription","contactsContainer","contactType","contactValue","onClick","Contact","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","profilePhoto","photos","large","Grid","container","item","xs","marginRight","profilePicture","uploadFile","target","files","initialValues","formData","then","Profile","width","Preloader","ProfileContainer","userId","match","params","authorizedUserId","history","getUserProfile","getStatus","refreshProfile","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/4.591c66f4.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {AppRootStateType} from \"../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        isAuth : state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: mapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n\n        return <Component {...restProps as T} />\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Post_avatar__3qkL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsHeader\":\"Posts_postsHeader__2Rl39\",\"postsContainer\":\"Posts_postsContainer__3fBmN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePicture\":\"Profile_profilePicture__2kcbj\",\"listContainer\":\"Profile_listContainer__160IQ\",\"contactsContainer\":\"Profile_contactsContainer__195_F\",\"uploadFile\":\"Profile_uploadFile__Jzl5m\"};","import React from 'react';\nimport classes from './Post.module.css'\nimport {PostsType} from \"../../../../redux/profile-reducer\";\nimport {Paper} from \"@material-ui/core\";\nimport userPhoto from \"./../../../../assets/images/user-avatar.png\"\n\nconst Post: React.FC<PostsType> = (props) => {\n    return (\n        <Paper style={{marginTop : \"20px\", padding : \"15px\", backgroundColor : \"#ccc9ff\"}}>\n            <img className={classes.avatar}\n                 alt={\"avatar\"}\n                 src={userPhoto}/>\n            <p>{props.message}</p>\n            <span>{`❤️ ${props.likesCount}`}</span>\n        </Paper>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post/Post';\nimport classes from './Posts.module.css'\nimport {PostsType} from \"../../../redux/profile-reducer\";\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {TextArea} from \"../../common/FormsControl/FormsControls\";\nimport {Button, Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport type PostsPageType = {\n    posts: Array<PostsType>\n    addPost: (inputValue: string) => void\n}\n\ntype FormDataType = {}\n\nconst maxLength1000 = maxLengthCreator(1000)\n\nconst AddPostForm = (props: InjectedFormProps<FormDataType>) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    name=\"postText\"\n                    component={TextArea}\n                    validate={[required, maxLength1000]}\n                    placeholder={\"Type your thoughts here...\"}\n                    style={{minWidth : \"400px\", minHeight : \"100px\", marginBottom : \"5px\", padding : \"10px\"}}\n                />\n            </div>\n            <Button type={'submit'}\n                    variant={\"outlined\"}\n                    color={\"primary\"}\n                    style={{margin : \"10px 0\"}}>Add your post</Button>\n        </form>\n    )\n}\n\nexport const AddPostReduxForm = reduxForm<FormDataType>({\n    form : \"ProfileAddNewPostForm\"\n})(AddPostForm)\n\nconst Posts: React.FC<PostsPageType> = (props) => {\n    const addPost = (value: any) => {\n        props.addPost(value.postText)\n    }\n    const newPosts = props.posts.map(p => {\n        return <Post key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>\n    })\n    return (\n        <Paper style={{marginTop : \"30px\", padding : \"15px\", backgroundColor : \"#ccc9ff\"}}>\n            <Typography variant=\"h3\" className={classes.postsHeader}>My Posts</Typography>\n            <AddPostReduxForm onSubmit={addPost}/>\n            <div className={classes.postsContainer}>\n                {newPosts}\n            </div>\n        </Paper>\n    );\n}\n\nexport default Posts;\n","import React from 'react';\nimport Posts from \"./Posts\";\nimport {PostsType} from \"../../../redux/profile-reducer\";\n\nexport type PostsContainerType = {\n    posts: PostsType[]\n    addPost: (inputValue: string) => void\n}\n\nconst PostsContainer: React.FC<PostsContainerType> = (props) => {\n    const state = props.posts\n\n    return (\n            <Posts addPost={props.addPost} posts={state}/>\n    );\n}\n\nexport default PostsContainer;\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {ProfileType} from \"../../../redux/profile-reducer\";\nimport React from \"react\";\nimport {reduxForm} from 'redux-form';\nimport {createField, Input, TextArea} from \"../../common/FormsControl/FormsControls\";\nimport {InjectedFormProps} from \"redux-form/lib/reduxForm\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../redux/redux-store\";\nimport styles from \"../../common/FormsControl/FormsControls.module.css\";\nimport {Button, Checkbox, FormControl} from \"@material-ui/core\";\n\nexport type ProfileFormDataType = {\n    fullName: string\n    aboutMe: string\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n}\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileFormDataType>> = ({handleSubmit, error}) => {\n    const profile = useSelector<AppRootStateType, ProfileType>(state => state.profilePage.profile)\n    return (\n        <form style={{marginTop : \"10px\"}} onSubmit={handleSubmit}>\n            <FormControl className={styles.formContainer}>\n                <div><b>Name:</b>{createField(\"Full name\", \"fullName\", [], Input)}</div>\n                <div><b>About me:</b> {createField(\"About me\", \"aboutMe\", [], TextArea)}</div>\n                <div><b>Looking for a job:</b> <Checkbox name={\"lookingForAJob\"}/></div>\n                <div><b>My professional\n                    skills:</b>{createField(\"My professional skills\", \"lookingForAJobDescription\", [], TextArea)}</div>\n                <div>\n                    <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                    return <div key={key}>\n                        <b> {createField(key, \"contacts.\" + key, [], Input)}</b>\n                    </div>\n                })}\n                </div>\n                {error && <div className={styles.formSummaryError}>\n                    {error}\n                </div>}\n                <div>\n                    <Button type={\"submit\"} variant=\"outlined\" color=\"primary\"\n                            style={{marginTop : \"10px\"}}>Save</Button>\n                </div>\n            </FormControl>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileFormDataType>({form : 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataReduxForm\n","import React, {ChangeEvent} from 'react';\nimport {Input} from \"@material-ui/core\";\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode : false,\n        status : this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState({\n            editMode : true\n        })\n    }\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode : false\n        })\n        this.props.updateStatus(this.state.status)\n    }\n\n    onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status : e.currentTarget.value\n        })\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: any) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status : this.props.status\n            })\n        }\n    }\n\n    render() {\n        return <div style={{textAlign : \"right\", fontStyle : \"italic\"}}>\n            <span><b>Status: </b></span>\n            {!this.state.editMode ?\n                <span onDoubleClick={this.activateEditMode}>{this.props.status || \"No status\"}</span> :\n                <Input autoFocus\n                       onChange={this.onChangeHandler}\n                       onBlur={this.deactivateEditMode}\n                       value={this.state.status}/>\n            }\n        </div>\n    }\n}\n\nexport default ProfileStatus;\n","import React, {ChangeEvent, useState} from 'react';\nimport classes from \"../Profile.module.css\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport userPhoto from \"./../../../assets/images/user-avatar.png\"\nimport ProfileDataReduxForm, {ProfileFormDataType} from \"./ProfileDataForm\";\nimport {Button, Grid, List, Paper} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({profile, isOwner, savePhoto, saveProfile, status, updateStatus}) => {\n\n    const [editMode, setEditMode] = useState(false)\n\n    let profilePhoto = profile.photos.large ? profile.photos.large : userPhoto\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileFormDataType) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false)\n        })\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={4} style={{marginRight: \"70px\"}}>\n                <img className={classes.profilePicture}\n                     src={profilePhoto} alt=\"avatar\"/>\n                <div>\n                    {isOwner && <label className={classes.uploadFile}>\n                        <input type={\"file\"} onChange={onMainPhotoSelected} className={classes.uploadFile}/>\n                        Change Photo\n                    </label>}\n                </div>\n            </Grid>\n            <Grid item xs={7}>\n                <Paper style={{padding : \"20px\", backgroundColor : \"#ccc9ff\"}}>\n                    <ProfileStatus status={status} updateStatus={updateStatus} />\n                    {editMode ? <ProfileDataReduxForm initialValues={{\n                            fullName : profile.fullName,\n                            aboutMe : profile.aboutMe,\n                            lookingForAJob : profile.lookingForAJob,\n                            lookingForAJobDescription : profile.lookingForAJobDescription\n                        }} onSubmit={onSubmit}/>\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\n                </Paper>\n            </Grid>\n        </Grid>\n\n    );\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <>\n            <Typography variant=\"h4\">{profile.fullName}</Typography>\n            <List className={classes.listContainer}>\n                <div><b>About me:</b> {profile.aboutMe}</div>\n                <div><b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\n                {profile.lookingForAJob &&\n                <div><b>My professional skills:</b> {profile.lookingForAJobDescription}</div>}\n                <div>\n                    <b>Contacts: </b>\n                    <div className={classes.contactsContainer}>\n                        {Object.keys(profile.contacts).map(key => {\n                            //@ts-ignore\n                            return <Contact key={key} contactType={key} contactValue={profile.contacts[key]}/>\n                        })}\n                    </div>\n                </div>\n            </List>\n            {isOwner && <div>\n                <Button variant=\"outlined\" color=\"primary\" onClick={goToEditMode}>Edit</Button>\n            </div>}\n        </>\n    )\n}\n\ntype ContactPropsType = {\n    contactType: string\n    contactValue: string\n}\n\nconst Contact: React.FC<ContactPropsType> = ({contactType, contactValue}) => {\n    return (\n        <div>\n            <span><b>{contactType}: </b></span>\n            <span>{contactValue}</span>\n        </div>\n    )\n}\nexport default ProfileInfo;\n","import React from 'react';\nimport PostsContainer from \"./Posts/PostsContainer\";\nimport {PostsType, ProfileType} from '../../redux/profile-reducer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\nimport {Paper} from \"@material-ui/core\";\nimport Preloader from \"../common/Preloader/Preloader\";\n\ntype ProfilePageType = {\n    posts: PostsType[]\n    status: string\n    profile: ProfileType\n    addPost: (inputValue: string) => void\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n}\n\nconst Profile: React.FC<ProfilePageType> = ({profile, status, updateStatus, posts, addPost, isOwner, savePhoto, saveProfile}) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <Paper style={{width : \"100%\", padding : \"15px\", backgroundColor : \"#ccc9ff\"}}>\n            <ProfileInfo profile={profile}\n                         isOwner={isOwner}\n                         savePhoto={savePhoto}\n                         saveProfile={saveProfile}\n                         status={status}\n                         updateStatus={updateStatus}\n            />\n            <PostsContainer posts={posts} addPost={addPost}/>\n        </Paper>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {\n    addPost,\n    getStatus,\n    getUserProfile,\n    PostsType,\n    ProfileType,\n    savePhoto,\n    saveProfile,\n    updateStatus,\n} from \"../../redux/profile-reducer\";\nimport {AppRootStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {compose} from \"redux\";\nimport {ProfileFormDataType} from \"./ProfileInfo/ProfileDataForm\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype mapStateToPropsType = {\n    posts: PostsType[]\n    profile: ProfileType\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (inputValue: string) => void\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileFormDataType) => Promise<void>\n}\n\ntype OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            if (this.props.authorizedUserId)\n                userId = this.props.authorizedUserId + \"\"\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     posts={this.props.posts}\n                     addPost={this.props.addPost}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     isOwner={!this.props.match.params.userId}\n                     savePhoto={this.props.savePhoto}\n                     saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppRootStateType): mapStateToPropsType => {\n    return {\n        profile : state.profilePage.profile,\n        posts : state.profilePage.posts,\n        status : state.profilePage.status,\n        authorizedUserId : state.auth.id,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {addPost, getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}